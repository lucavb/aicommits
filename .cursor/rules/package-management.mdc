---
description: 
globs: package.json
alwaysApply: false
---
# Package Management Rules

When working with dependencies in this project:

## Adding Packages
- **ALWAYS** use `npm install <package-name>` to add runtime dependencies
- **ALWAYS** use `npm install --save-dev <package-name>` to add development dependencies
- **ALWAYS** let npm manage the package.json dependencies and devDependencies automatically

## Removing Packages
- **ALWAYS** use `npm uninstall <package-name>` to remove packages cleanly
- **ALWAYS** use npm commands to ensure proper dependency cleanup

## Updating Packages
- Use `npm update <package-name>` for targeted package updates
- Use `npm update` for comprehensive package updates
- Use `npm audit fix` to resolve security vulnerabilities automatically

## Benefits of Proper Package Management
- Ensures package-lock.json stays perfectly synchronized
- Maintains consistent dependency resolution across environments
- Provides seamless dependency management across the entire team
- Automatically handles peer dependencies and version ranges correctly
- Prevents version conflicts and dependency resolution issues

Always leverage npm's built-in package management to maintain consistency and ensure reliable dependency handling.

- Maintains consistent dependency management across the team
- Automatically handles peer dependencies and version ranges

Always let npm handle the package.json modifications to maintain consistency and prevent errors.
