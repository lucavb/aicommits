---
description: 
globs: 
alwaysApply: true
---

# aicommits Development Guidelines

This is an AI-powered git commit message generator. Follow these guidelines when contributing:

## Code Style & Quality
- Use TypeScript for all new code
- Follow the existing ESLint configuration (`npm run eslint`)
- Use Prettier for code formatting (`npm run prettier:fix`)
- Always use proper TypeScript types with full type safety - create interfaces, types, or use unknown/object for robust type definitions
- Use dependency injection with Inversify for service management
- Write self-documenting code through clear naming and structure - let the code tell its own story
- Add comments only when they provide essential context that cannot be conveyed through the code itself (e.g., explaining complex business logic, architectural decisions, or non-obvious workarounds)
- Create descriptive variable names, function names, and clear logic flow that make the code's intent obvious

## Testing
- Write comprehensive tests for new features using Vitest
- Run tests with `npm test` or `npm run test:watch`
- Maintain high test coverage with `npm run test:coverage`
- Co-locate test files with source files or organize them in `__tests__` directories

## Development Workflow
- Use `npm run dev` to run the CLI in development mode
- Use `npm run dev:setup` to test the setup flow
- Use `npm run dev:stage-all` to test staging all files
- Always run `npm run type-check` before committing to ensure type safety

## Architecture
- Organize services in `src/services/` following dependency injection patterns
- Structure commands in `src/commands/` for clean CLI interactions
- Place providers in `src/providers/` for different AI service integrations
- Follow the existing service interfaces and established patterns

## AI Providers
- Support multiple AI providers (OpenAI, Anthropic, Ollama)
- Implement the `ai-provider.interface.ts` for each provider
- Handle API errors gracefully with helpful user feedback
- Respect rate limits and provide meaningful error messages

## Configuration
- Leverage the existing config service for user settings
- Store configuration in user's home directory
- Validate all configuration with Zod schemas
- Provide intuitive setup wizards for new users

## Git Integration
- Use `simple-git` for all git operations
- Handle git errors gracefully with clear messaging
- Support diverse git workflows and edge cases
- Respect `.gitignore` and other git configurations

## CLI Experience
- Use `@clack/prompts` for engaging interactive prompts
- Provide clear, helpful error messages that guide users toward solutions
- Support both interactive and non-interactive modes seamlessly
- Follow conventional CLI patterns and comprehensive help text

## Commit Message Generation
- Generate meaningful, conventional commit messages
- Support multiple commit message formats
- Enable user customization of commit styles
- Follow conventional commit standards when configured
